# -*- coding: utf-8 -*-
#
# Scotty -- a meta-toolkit for runtime toolkit overloading
#
# Copyright 2009-2011, Universit√© Paris-Sud
# by James R. Eagan (code at my last name dot me)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# and GNU Lesser General Public License along with this program.  
# If not, see <http://www.gnu.org/licenses/>.

from Foundation import *
from AppKit import *
from Quartz import *
from Quartz.QuartzCore import *
import objc

from IIKit import *

from QTSRTGlassView import *
from IIKit.ScottyGlassLayer import *

import os
from threading import Timer
from pysrt import SubRipFile

# import jre.debug

class QTSRTInstrument(SMInstrument):
    name = u"QuickTime Subtitler" # FIXME refactor
    verb = u"Load subtitles..."
    
    def __init__(self):
        super(QTSRTInstrument, self).__init__()
        
        self._timer = None
        self.layer = None
        
    def wantsGlassWindow(self):
        return True
        
    def newGlassViewForGlassWindow(self, glassWindow):
        # FIXME:  Redo glass windows to support glass layers, etc.
        # print "Making glass view for ", glassWindow
        # window = glassWindow.parentWindow()
        # view = QTSRTGlassView(window.frame(), self)
        # return view
        return None
    
    def shouldHijackInteraction(self):
        return False
    
    State start:
        pass
        Transition press(self, LeftMouseDown) >> self.drawing:
            pass
            
        # Triggered on escape or command-.
        Transition abort(self, CancelOperation):
            pass
    
    State drawing:
        pass

    def activate(self, context):
        super(QTSRTInstrument, self).activate(context)
        if context.activationSource:
            target = context.activationSource.window().contentView()
            target = target.subviews()[0].subviews()[0]
            self.attachToView(target)
        
    def attachToView(self, view):
        try:
            MGPlayerView = objc.lookUpClass('MGPlayerView')
        except objc.nosuchclass_error:
            MGPlayerView = tuple()
        
        if not isinstance(view, MGPlayerView):
            print "*** Failed to access MGPlayerView"
            return None
        
        controller = view.player()
        movieDocument = NSDocumentController.sharedDocumentController().currentDocument()
        self.subtitles = self.loadSubtitlesForMovie(movieDocument)
        self.layer = self.makeLayerForView(view)
        view.layer().addSublayer_(self.layer)
        
        self.pollTimeForController(controller)
    
    def loadSubtitlesForMovie(self, movie):
        fileName = movie.fileName()
        if fileName:
            fileNameRoot = os.path.splitext(fileName)[0]
            srtFileName = fileNameRoot + '.srt'
            print "Movie:", fileName
            print "SRT  :", srtFileName, os.path.exists(srtFileName)
            if os.path.exists(srtFileName):
                try:
                    subs = SubRipFile.open(srtFileName)
                except UnicodeDecodeError:
                    subs = SubRipFile.open(srtFileName, 'latin1')
                subs.sort()
                return subs
    
    def subtitleForTime(self, time):
        ''' Get the subtitle entry for the specified `time` in seconds.  Returns None
            if there is no such subtitle.
        '''
        if not self.subtitles:
            return None
        l, r = 0, len(self.subtitles) - 1
        while l <= r:
            pivot = l + (r-l)/2
            sub = self.subtitles[pivot]
            start = sub.start.ordinal / 1000.0
            end = sub.end.ordinal / 1000.0
            if start < time < end:
                return sub
            elif time < start:
                r = pivot - 1
            else:
                l = pivot + 1
        
        return None
    
    @jre.cocoa.cocoa_threadsafe
    def pollTimeForController(self, controller):
        currentTime = controller.currentTime()
        currentTimeInSeconds = currentTime[0] / float(currentTime[1])
        # print "Current time: %ss" % (currentTimeInSeconds)
        subtitle = self.subtitleForTime(currentTimeInSeconds)
        subtitle = subtitle.text.strip() if subtitle else u''
        # print "%ss: %s" % (currentTimeInSeconds, subtitle.encode('utf8'))
        self.layer.setString_(subtitle)
        self.layer.setHidden_(False if subtitle else True)
        
        if self._timer and self._timer.is_alive():
            self._timer.cancel()
        
        self._timer = Timer(0.25, self.pollTimeForController, (controller,))
        self._timer.start()
    
    def deactivate(self):
        super(QTSRTInstrument, self).deactivate()
        
        if self._timer:
            self._timer.cancel()
        
        if self.layer:
            self.layer.removeFromSuperlayer()

    def makeLayerForView(self, view):
        layer = CATextLayer.layer()
        layer.setFrame_(NSMakeRect(0, 0, view.layer().frame().size.width, 65))
        layer.setAutoresizingMask_(kCALayerWidthSizable|kCALayerMaxYMargin)
        layer.setBackgroundColor_(NSColor.colorWithCalibratedRed_green_blue_alpha_(0, 0, 0, 0.5).quartzColor())
        layer.setAlignmentMode_(kCAAlignmentCenter)
        layer.setWrapped_(True)
        return layer
        

### MGMoviePlaybackController methods:
# changeVolumeToMaximum_
# changeVolumeToMinimum_
# currentTime
# duration
# encodeWithCoder_
# gotoBeginningOfPlaybackRange_
# gotoBeginning_
# gotoEndOfAvailableRanges_
# gotoEndOfPlaybackRange_
# gotoEnd_
# gotoNextChapter_
# gotoPreviousChapter_
# handleBeginGestureWithEvent_
# handleKeyDown_
# handleScrollWheel_
# handleSwipeWithEvent_
# initWithCoder_
# isJogging
# isMuted
# isPlaying
# jogRate
# joggingDidStop
# movie
# naturalSize
# periodicallyUpdatesTime
# rate
# scanBackward_
# scanForward_
# selection
# setCurrentTime_
# setJogRate_
# setMovie_
# setMuted_
# setPeriodicallyUpdatesTime_
# setPlaying_
# setRate_
# setUpdateInterval_
# setUpdateResolution_
# setVolume_
# skipBackwardThirtySeconds_
# statusString
# stepBackward_
# stepForward_
# timelineCell_willChangeTimeValue_
# toggleMuted_
# togglePlaying_
# updateInterval
# updateResolution
# validateUserInterfaceItem_
# volume
# wouldHandleBeginGestureWithEvent_

# from IIKit import *
# im = InstrumentManager.sharedInstrumentManager()
# i = im.instruments()[-1]()
# from WidgetPickerInstrument import *
# v = WidgetPickerInstrument.run()
# i.attachToView(v)


### MGPlayerView methods:
# ['CAMLType', 'CAMLTypeForKey_', 'CA_addValue_multipliedBy_', 'CA_copyRenderValue', 'CA_distanceToValue_', 'CA_interpolateValue_byFraction_', 'CA_interpolateValues___interpolator_', 'CA_prepareRenderValue', 'CI_affineTransform', 'CI_rect', 'IKImageRepresentationWithType_', 'ISS__ay_performSelector_inThread_', 'ISS__ay_performSelector_inThread_beforeDate_', 'ISS__ay_performSelector_withObject_inThread_', 'ISS__ay_performSelector_withObject_inThread_beforeDate_', 'ISS__ay_performSelector_withObject_withObject_inThread_', 'ISS__ay_performSelector_withObject_withObject_inThread_beforeDate_', 'ISS_xmlStringWithBag_', 'MGKeyValueProxyTarget_keyPathsForValuesAffectingValueForKey_', 'QTKeyValueProxyTarget_keyPathsForValuesAffectingValueForKey_', 'SCTExtractTitle', 'SCTPerformDelayedSelector_', 'SCTPerformDelayedSelector_withObject_', 'SCTPerformDelayedSelector_withObject_afterDelay_', 'SCTPerformSelector_withObjectsFromArray_', 'SCTUserInterfaceItemIdentifier', '_', '__block_signature__', '__class__', '__cobject__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_pyobjc_performOnThread:', '_pyobjc_performOnThreadWithResult:', 'abCaseInsensitiveIsEqual_', 'abDictionaryWithValuesForKeyPaths_', 'abRemoveObserverIgnoringExceptions_forKeyPath_', 'accessibilityAddTemporaryChild_', 'accessibilityAllowsOverriddenAttributesWhenIgnored', 'accessibilityArrayAttributeCount_', 'accessibilityArrayAttributeValues_index_maxCount_', 'accessibilityAttributeValue_forParameter_', 'accessibilityAttributedValueForStringAttributeAttributeForParameter_', 'accessibilityDecodeOverriddenAttributes_', 'accessibilityEncodeOverriddenAttributes_', 'accessibilityIndexForChildUIElementAttributeForParameter_', 'accessibilityIndexOfChild_', 'accessibilityOverriddenAttributes', 'accessibilityParameterizedAttributeNames', 'accessibilityPresenterProcessIdentifier', 'accessibilityRemoveTemporaryChild_', 'accessibilitySetOverrideValue_forAttribute_', 'accessibilitySetPresenterProcessIdentifier_', 'accessibilityShouldSendNotification_', 'accessibilityShouldUseUniqueId', 'accessibilitySupportsNotifications', 'accessibilitySupportsOverriddenAttributes', 'accessibilityTemporaryChildren', 'actionAtItemEnd', 'addBoundaryTimeObserverForTimes_queue_usingBlock_', 'addObject_toBothSidesOfRelationshipWithKey_', 'addObject_toPropertyWithKey_', 'addObserverForKeyPath_options_usingBlock_', 'addObserver_forKeyPath_options_context_', 'addPeriodicTimeObserverForInterval_queue_usingBlock_', 'allPropertyKeys', 'allowsWeakReference', 'attributeKeys', 'autoContentAccessingProxy', 'autorelease', 'awakeAfterUsingCoder_', 'awakeFromNib', 'bind_toObject_withKeyPath_options_', 'canRenderWithCGLContext_', 'classCode', 'classDescription', 'classDescriptionForDestinationKey_', 'classForArchiver', 'classForCoder', 'classForKeyedArchiver', 'classForPortCoder', 'className', 'class__', 'clearProperties', 'coerceValueForScriptingProperties_', 'coerceValue_forKey_', 'compositionParameterView_didChangeParameterWithKey_', 'compositionParameterView_shouldDisplayParameterWithKey_attributes_', 'compositionPickerViewDidStartAnimating_', 'compositionPickerViewWillStopAnimating_', 'compositionPickerView_didLoadComposition_', 'compositionPickerView_didSelectComposition_', 'compositionPickerView_draggingEnteredComposition_sender_', 'compositionPickerView_keyDown_', 'compositionPickerView_performDragOperationOnComposition_sender_', 'compositionPickerView_willSelectComposition_', 'conformsToProtocol_', 'copy', 'copyRenderedTextureForCGLContext_pixelFormat_bounds_isFlipped_', 'copyScriptingValue_forKey_withProperties_', 'createImageWithOptions_', 'createKeyValueBindingForKey_typeMask_', 'createOptimizedProviderWithTransformation_cropping_', 'currentItem', 'currentTime', 'dealloc', 'debugDescription', 'description', 'descriptionNoPasswords', 'dictionaryWithValuesForKeys_', 'didChangeValueForKey_', 'didChangeValueForKey_withSetMutation_usingObjects_', 'didChange_valuesAtIndexes_forKey_', 'dispatchQueue', 'doesContain_', 'doesNotRecognizeSelector_', 'encodeWithCAMLWriter_', 'entityName', 'error', 'exposedBindings', 'finalize', 'flushKeyBindings', 'forwardInvocation_', 'forwardingTargetForSelector_', 'handleQueryWithUnboundKey_', 'handleTakeValue_forUnboundKey_', 'hash', 'ikInMainLoopWait_', 'imageBrowser_didValidateVisibleCellsAtIndexes_', 'imageBrowser_willDisplayCellsAtIndexes_', 'imageSubtitle', 'imageTitle', 'imageToDrawForCell_', 'implementsSelector_', 'infoForBinding_', 'init', 'initWithDispatchQueue_', 'initWithPlayerItem_', 'initWithURL_', 'insertValue_atIndex_inPropertyWithKey_', 'insertValue_inPropertyWithKey_', 'inverseForRelationshipKey_', 'isAudioPlaybackEnabledAtAllRates', 'isCaseInsensitiveLike_', 'isClosedCaptionDisplayEnabled', 'isEqualTo_', 'isEqual_', 'isFault', 'isGreaterThanOrEqualTo_', 'isGreaterThan_', 'isKindOfClass_', 'isLessThanOrEqualTo_', 'isLessThan_', 'isLike_', 'isMemberOfClass_', 'isMuted', 'isNSArray__', 'isNSData__', 'isNSDate__', 'isNSDictionary__', 'isNSNumber__', 'isNSOrderedSet__', 'isNSSet__', 'isNSString__', 'isNSTimeZone__', 'isNSValue__', 'isNotEqualTo_', 'isProxy', 'isToManyKey_', 'keyValueBindingForKey_typeMask_', 'maxRateForAudioPlayback', 'methodDescriptionForSelector_', 'methodForSelector_', 'methodSignatureForSelector_', 'minRateForAudioPlayback', 'mutableArrayValueForKeyPath_', 'mutableArrayValueForKey_', 'mutableCopy', 'mutableOrderedSetValueForKeyPath_', 'mutableOrderedSetValueForKey_', 'mutableSetValueForKeyPath_', 'mutableSetValueForKey_', 'newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_', 'nextSlicePiece_', 'objectSpecifier', 'observationInfo', 'observeValueForKeyPath_ofObject_change_context_', 'optionDescriptionsForBinding_', 'ownsDestinationObjectsForRelationshipKey_', 'pause', 'performSelectorInBackground_withObject_', 'performSelectorOnMainThread_withObject_waitUntilDone_', 'performSelectorOnMainThread_withObject_waitUntilDone_modes_', 'performSelector_', 'performSelector_object_afterDelay_', 'performSelector_onThread_withObject_waitUntilDone_', 'performSelector_onThread_withObject_waitUntilDone_modes_', 'performSelector_withObject_', 'performSelector_withObject_afterDelay_', 'performSelector_withObject_afterDelay_inModes_', 'performSelector_withObject_withObject_', 'play', 'prepareItem_withCompletionHandler_', 'pyobjc_ISA', 'pyobjc_instanceMethods', 'pyobjc_performSelector:onThread:withObject:', 'pyobjc_performSelector:onThread:withObject:modes:', 'pyobjc_performSelector:onThread:withObject:waitUntilDone:', 'pyobjc_performSelector:onThread:withObject:waitUntilDone:modes:', 'pyobjc_performSelector:withObject:afterDelay:', 'pyobjc_performSelector:withObject:afterDelay:inModes:', 'pyobjc_performSelectorInBackground:withObject:waitUntilDone:', 'pyobjc_performSelectorInBackground_withObject_waitUntilDone_', 'pyobjc_performSelectorOnMainThread:withObject:', 'pyobjc_performSelectorOnMainThread:withObject:modes:', 'pyobjc_performSelectorOnMainThread:withObject:waitUntilDone:modes:', 'pyobjc_performSelectorOnMainThread_withObject_', 'pyobjc_performSelectorOnMainThread_withObject_modes_', 'pyobjc_performSelectorOnMainThread_withObject_waitUntilDone_modes_', 'pyobjc_performSelector_onThread_withObject_', 'pyobjc_performSelector_onThread_withObject_modes_', 'pyobjc_performSelector_onThread_withObject_waitUntilDone_', 'pyobjc_performSelector_onThread_withObject_waitUntilDone_modes_', 'pyobjc_performSelector_withObject_afterDelay_', 'pyobjc_performSelector_withObject_afterDelay_inModes_', 'rate', 'release', 'releaseRenderedTexture_forCGLContext_', 'removeAudioPlaybackRateLimits', 'removeObject_fromBothSidesOfRelationshipWithKey_', 'removeObject_fromPropertyWithKey_', 'removeObserver_forKeyPath_', 'removeObserver_forKeyPath_context_', 'removeTimeObserver_', 'removeValueAtIndex_fromPropertyWithKey_', 'renderToBuffer_withBytesPerRow_pixelFormat_forBounds_', 'renderWithCGLContext_forBounds_', 'replaceCurrentItemWithPlayerItem_', 'replaceValueAtIndex_inPropertyWithKey_withValue_', 'replacementObjectForArchiver_', 'replacementObjectForCoder_', 'replacementObjectForKeyedArchiver_', 'replacementObjectForPortCoder_', 'resolveForwardingConflictWithPreviousMetadata_forKey_', 'respondsToSelector_', 'retain', 'retainCount', 'retainWeakReference', 'scriptingProperties', 'scriptingValueForSpecifier_', 'seekToTime_', 'seekToTime_completionHandler_', 'seekToTime_toleranceBefore_toleranceAfter_', 'seekToTime_toleranceBefore_toleranceAfter_completionHandler_', 'self', 'setActionAtItemEnd_', 'setClosedCaptionDisplayEnabled_', 'setMaxRateForAudioPlayback_', 'setMinRateForAudioPlayback_', 'setMuted_', 'setNilValueForKey_', 'setObservationInfo_', 'setRate_', 'setScriptingProperties_', 'setUserInterfaceItemIdentifier_', 'setValue_forKeyPath_', 'setValue_forKey_', 'setValue_forUndefinedKey_', 'setValuesForKeysWithDictionary_', 'setVolume_', 'setWaitsUntilItemsAreReadyForInspectionBeforeMakingEligibleForPlayback_', 'settingsView_clearSettingForKey_', 'settingsView_renameKey_toKey_', 'settingsView_setSetting_forKey_', 'settingsView_settingForKey_', 'settingsView_shouldRenameKey_', 'shouldColorMatch', 'status', 'storedValueForKey_', 'superclass', 'supportedBufferPixelFormats', 'supportedRenderedTexturePixelFormats', 'takeStoredValue_forKey_', 'takeStoredValuesFromDictionary_', 'takeValue_forKeyPath_', 'takeValue_forKey_', 'takeValuesFromDictionary_', 'toManyRelationshipKeys', 'toOneRelationshipKeys', 'unableToSetNilForKey_', 'unbind_', 'userInterfaceItemIdentifier', 'validateTakeValue_forKeyPath_', 'validateValue_forKeyPath_error_', 'validateValue_forKey_', 'validateValue_forKey_error_', 'valueAtIndex_inPropertyWithKey_', 'valueClassForBinding_', 'valueForKeyPath_', 'valueForKey_', 'valueForUndefinedKey_', 'valueWithName_inPropertyWithKey_', 'valueWithUniqueID_inPropertyWithKey_', 'valuesForKeys_', 'volume', 'waitsUntilItemsAreReadyForInspectionBeforeMakingEligibleForPlayback', 'willChangeValueForKey_', 'willChangeValueForKey_withSetMutation_usingObjects_', 'willChange_valuesAtIndexes_forKey_', 'zone']