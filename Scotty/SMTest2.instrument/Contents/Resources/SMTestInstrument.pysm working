# -*- coding: utf-8 -*-
#
# Scotty -- a meta-toolkit for runtime toolkit overloading
#
# Copyright 2009-2011, Universit√© Paris-Sud
# by James R. Eagan (code at my last name dot me)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# and GNU Lesser General Public License along with this program.  
# If not, see <http://www.gnu.org/licenses/>.

from IIKit import *

from SMTestGlassView import *

class SMTestInstrument(SMInstrument):
    def __init__(self, instrumentID):
        super(SMTestInstrument, self).__init__(instrumentID)
        
        self.name = u"State Machine Tester 2" # FIXME refactor
        self.verb = u"Test state machine 2"
        
        self.colors = [NSColor.redColor(), NSColor.blueColor(), NSColor.greenColor()]
        self.colorIndex = -1
        self.glassView = None
    
    def wantsGlassWindow(self):
        return True
        
    def newGlassViewForGlassWindow(self, glassWindow):
        window = glassWindow.parentWindow()
        view = SMTestGlassView(window.frame(), self)
        return view
    
    def shouldHijackInteraction(self):
        return True
    
    
    State start:
        Transition press(self, LeftMouseDown) >> self.drawing:
            self.glassView = InstrumentManager.sharedInstrumentManager().glassViewForWindow(event.window())
            self.colorIndex = (self.colorIndex + 1) % len(self.colors)
            color = self.colors[self.colorIndex]
            self.glassView.addPathWithColor_(color)

    State drawing:
        def enter():
            assert self.glassView is not None
            
        Transition release(self, LeftMouseUp) >> self.start:
            pass

        Transition move(self, LeftMouseDragged):
            self.glassView.addDrawPoint_(event.locationInWindow())
        
        def leave():
            self.glassView = None
