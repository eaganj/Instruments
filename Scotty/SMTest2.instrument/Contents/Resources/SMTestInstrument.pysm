from IIKit import *

from SMTest2GlassView import *

class SMTestInstrument(SMInstrument):
    name = u"State Machine Tester 2" # FIXME refactor
    verb = u"Test state machine 2"
    
    def __init__(self):
        super(SMTestInstrument, self).__init__()
        
        
        self.colors = [NSColor.redColor(), NSColor.blueColor(), NSColor.greenColor()]
        self.colorIndex = -1
        self.glassView = None
    
    def wantsGlassWindow(self):
        return True
        
    def newGlassViewForGlassWindow(self, glassWindow):
        window = glassWindow.parentWindow()
        view = SMTest2GlassView(window.frame(), self)
        return view
    
    def shouldHijackInteraction(self):
        return True
    
    State start:
        Transition press(self, LeftMouseDown) >> self.drawing:
            self.glassView = InstrumentManager.sharedInstrumentManager().glassViewForWindow(event.window())
            self.colorIndex = (self.colorIndex + 1) % len(self.colors)
            color = self.colors[self.colorIndex]
            self.glassView.addPathWithColor_(color)
        
        # Transition key(self, KeyDown, keyCode=53):
        #     self.deactivate()
        #     return True
        
        # Triggered on escape or command-.
        Transition abort(self, CancelOperation):
            self.deactivate()

    State drawing:
        def enter():
            assert self.glassView is not None
            
        Transition release(self, LeftMouseUp) >> self.start:
            pass

        Transition move(self, LeftMouseDragged):
            self.glassView.addDrawPoint_(event.locationInWindow())
        
        def leave():
            self.glassView = None
