# Substance Instruments
#
# Copyright 2009-2011, Universit√© Paris-Sud
# by James R. Eagan (code at my last name dot me)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# and GNU Lesser General Public License along with this program.  
# If not, see <http://www.gnu.org/licenses/>.

from IIKit import *
import iStarWrapper
import iStar

import jre.debug
from jre.compat import namedtuple
import jre.geom as geom
from jre.geom import Point, Size, Rect, MakeRect

SCREEN_WIDTH, SCREEN_HEIGHT = 2560, 1600
BUTTON1 = "Button1"
BUTTON2 = "Button2"
BUTTON3 = "Button3"
BUTTON4 = "Button4"
BUTTON5 = "Button5"
BUTTON6 = "Button6"
BUTTON7 = "Button7"
SCOTTY_BUTTON = "ScottyButton"
MOVE_BUTTON = BUTTON1
ROTATE_BUTTON = BUTTON2
SCALE_BUTTON = BUTTON3
ZOOM_BUTTON = BUTTON4
STAMP_BUTTON = BUTTON5


NormalCursorColor = "0:1:0:0.5"
HighlightCursorColor = "0.05:1:1:0.5"
ZoomingColor = "1.0:0.0:0.0:0.25"
RotatingColor = ZoomingColor

NormalCursorColor = "0:1:0:0.5"
HighlightCursorColor = "0.05:1:1:0.5"

NormalCursorColor = "0:1:0:0.5"
HighlightCursorColor = "0.05:1:1:0.5"

class MoveInstrument(SMInstrument):
    name = u"WILD Mover" # FIXME refactor
    verb = u"Move object"
    
    @jre.debug.trap_exceptions
    def __init__(self):
        super(MoveInstrument, self).__init__()
        
        self._sg = self.sceneGraph
        
        self.cursor = iStarWrapper.Object.new("Cursor", "My Cursor")
        self.cursor.x = 900
        self.cursor.y = 1000
        self.cursor.radius = 100
        self.cursor.color = NormalCursorColor
        self.cursor.hidden = False
        self._sg.add_child(self.cursor)
        
        self.toMove = None


    State start:
        Transition pointOnObject(self, PointEvent, guard=self.isPointingOnObject) >> self.hovering:
            self.updateCursorPosition(event)
        
        Transition point(self, PointEvent):
            self.updateCursorPosition(event)
        
        Transition dropScotty(self, ButtonPressEvent, device=SCOTTY_BUTTON):
            scottyWindow = self.getScottyWindow()
            if not scottyWindow:
                print "*** Warning: no window to drop!"
                return

            scottyWindow.x = self.cursor.x
            scottyWindow.y = self.cursor.y
            scottyWindow.hidden = False
            print "Showing Scotty window at", scottyWindow.x, scottyWindow.y, scottyWindow

        Transition scottyTest(self, ScottyPressEvent):
            print "Scotty event!"
            
        Transition buttonEvent(self, ButtonPressEvent):
            print "Misc button event", event, event.device, event.value

        Transition default(self, WILDEvent):
            print "Received unexpected event", event, event.device, event.value
    
    State hovering:
        def enter(self):
            self.cursor.color = HighlightCursorColor
        
        def leave(self):
            self.cursor.color = NormalCursorColor
            
        Transition unHover(self, PointEvent, guard=lambda event: not self.isPointingOnObject(event)) >> self.start:
            self.updateCursorPosition(event)
        
        Transition point(self, PointEvent):
            self.updateCursorPosition(event)
        
        Transition press(self, ButtonPressEvent, device=MOVE_BUTTON) >> self.moving:
            pass

        Transition rotate(self, ButtonPressEvent, device=ROTATE_BUTTON) >> self.rotating:
            pass
        
        Transition zoomViewport(self, ButtonPressEvent, device=SCALE_BUTTON) >> self.zoomingViewport:
            pass
        
        Transition zoomImage(self, ButtonPressEvent, device=ZOOM_BUTTON) >> self.zooming:
            pass
            
        Transition stamp(self, ButtonPressEvent, device=STAMP_BUTTON):
           self.stampObjectUnderCursor()
    
    State moving:
        def enter(self):
            point = Point(self.cursor.x, self.cursor.y)
            obj = self.getObjectAtPoint(point)
            print "Grabbing object at", point
            order = self._sg.stacking_order[:]
            order.remove(obj.get_name())
            order.append(obj.get_name())
            self._sg.stacking_order = order
            self.toMove = obj
            self.moveOffset = geom.delta(point, Point(obj.x, obj.y))
            self.cursor.color = HighlightCursorColor
        
        def leave(self):
            self.cursor.color = NormalCursorColor
            self.toMove = None
            self.moveOffset = None
            
        Transition point(self, PointEvent):
            self.updateCursorPosition(event)
            point = Point(*self.convertPointFromScreenToWall(Point(event.value.x, event.value.y),
                                                             event.value.screen))
            self.moveObjectWithOffsetTo(self.toMove, self.moveOffset, point)
        
        Transition stamp(self, ButtonPressEvent, device=STAMP_BUTTON):
            self.stampObjectUnderCursor()
                
        Transition release(self, ButtonReleaseEvent, device=MOVE_BUTTON) >> self.start:
            pass
    
    State zooming:
        def enter(self):
            point = Point(self.cursor.x, self.cursor.y)
            obj = self.getObjectAtPoint(point)
            self.toZoom = obj
            self.zoomOrigin = point
            self.cursor.color = ZoomingColor
        
        def leave(self):
            self.cursor.color = NormalCursorColor
            self.cursor.radius = 100
            self.toZoom = None
            self.zoomOrigin = None
        
        Transition point(self, PointEvent):
            point = self.convertPointFromScreenToWall(
                                                (event.value.x, event.value.y),
                                                event.value.screen)

            factor = 1.0 + (geom.dist(point, self.zoomOrigin) / 1000)
            factor = factor if point.y > self.zoomOrigin.y else 1.0 / factor

            self.cursor.radius = 100 * factor
            
            self.zoomObjectTo(self.toZoom, factor)
        
        Transition release(self, ButtonReleaseEvent, device=ZOOM_BUTTON) >> self.start:
            pass
    
    State zoomingViewport:
        def enter(self):
            point = Point(self.cursor.x, self.cursor.y)
            obj = self.getObjectAtPoint(point)
            self.toZoom = obj
            self.zoomOrigin = point
            self.toZoomOriginalFrame = MakeRect(obj.x, obj.y, obj.width, obj.height)
            self.cursor.color = ZoomingColor
        
        def leave(self):
            self.cursor.color = NormalCursorColor
            self.cursor.radius = 100
            self.toZoom.rescale = True
            self.toZoom = None
            self.zoomOrigin = None
        
        Transition point(self, PointEvent):
            point = self.convertPointFromScreenToWall((event.value.x, event.value.y),
                                                      event.value.screen)
            
            factor = 1.0 + (geom.dist(point, self.zoomOrigin) / 1000)
            factor = factor if point.y > self.zoomOrigin.y else 1.0 / factor
            
            self.cursor.radius = 100*factor
            
            rotation = self.toZoom.rotation
            self.zoomObjectWithViewportRotationAndAnchorTo(self.toZoom, self.toZoomOriginalFrame, rotation, self.zoomOrigin, factor)
        
        Transition release(self, ButtonReleaseEvent, device=SCALE_BUTTON) >> self.start:
            pass
    
    State rotating:
        def enter(self):
            point = Point(self.cursor.x, self.cursor.y)
            obj = self.getObjectAtPoint(point)
            self.target = obj
            self.rotationOrigin = point
            self.initialRotation = obj.rotation
            self.cursor.color = RotatingColor
        
        def leave(self):
            self.cursor.color = NormalCursorColor
            self.target = None
            self.rotationOrigin = None
            self.initialRotation = None
        
        Transition point(self, PointEvent):
            point = self.convertPointFromScreenToWall((event.value.x, event.value.y), event.value.screen)
            
            factor = geom.dist(point, self.rotationOrigin) * 0.05
            self.target.rotation = self.initialRotation + factor
        
        Transition release(self, ButtonReleaseEvent, device=ROTATE_BUTTON) >> self.start:
            pass
    
    
    def updateCursorPosition(self, event):
        x, y = self.convertPointFromScreenToWall((event.value.x, event.value.y),
                                                 event.value.screen)
        
        self.cursor.x = x
        self.cursor.y = y
    
    def stampObjectUnderCursor(self):
        point = Point(self.cursor.x, self.cursor.y)
        obj = self.getObjectAtPoint(point)
        assert hasattr(obj, 'stamp')
        if obj.stamp == 'Accepted':
            print '-> Rejected'
            obj.stamp = 'Rejected'
        elif obj.stamp == 'Rejected':
            print '-> None'
            obj.stamp = 'None'
        elif obj.stamp == 'None':
            print '-> Accepted'
            obj.stamp = 'Accepted'
    
    def zoomObjectTo(self, obj, factor):
        assert hasattr(obj, 'zoom')
        print "Zooming", obj, "by", factor
        obj.zoom = 100 * factor
    
    def zoomObjectWithViewportRotationAndAnchorTo(self, obj, objFrame, rotation, anchor, factor):
        assert hasattr(obj, 'width') and hasattr(obj, 'height') and hasattr(obj, 'x') and hasattr(obj, 'y')
        center = Point(objFrame.origin.x + objFrame.size.width/2, objFrame.origin.y + objFrame.size.height/2)
        #unrotatedFrame = geom.rotateRectAroundPoint(objFrame, center, -rotation)
        unrotatedFrame = objFrame
        unrotatedAnchor = geom.rotatePointAroundPoint(anchor, center, -rotation)
        scaledFrame = self.scaleRectFromPointBy(unrotatedFrame, unrotatedAnchor, factor)
        #scaledCenter = Point(scaledFrame.origin.x + scaledFrame.size.width/2, 
        #                     scaledFrame.origin.y + scaledFrame.size.height/2)
        #rotatedRect = geom.rotateRectAroundPoint(scaledFrame, scaledCenter, rotation)
        (obj.x, obj.y), (obj.width, obj.height) = scaledFrame#rotatedRect
    
    def zoomObjectWithViewportAnchoredAtTo(self, obj, objFrame, anchor, factor):
        assert hasattr(obj, 'width') and hasattr(obj, 'height') and hasattr(obj, 'x') and hasattr(obj, 'y')
        (obj.x, obj.y), (obj.width, obj.height) = self.scaleRectFromPointBy(objFrame, anchor, factor)
        
    
    def scaleRectFromPointBy(self, rect, point, factor):
        '''
        Return a `rect` scaled by a `factor` with `point` treated as an anchor for scaling.
        '''
        (x, y), (w, h) = rect
        ax, ay = point # anchor
        ox, oy = ax-x, ay-y # offset
        
        rw, rh = factor * w, factor * h
        dox, doy = factor * ox - ox, factor * oy - oy

        result = MakeRect(x-dox, y-doy, rw, rh)
        return result
    
    #@iStar.Action #TODO
    def moveObjectWithOffsetTo(self, obj, offset, point):
        self.moveObjectTo(obj, Point(point.x + offset.x, point.y + offset.y))
        
    #@iStar.Action #TODO
    def moveObjectTo(self, obj, point):
        obj.x = point.x
        obj.y = point.y
    
    def convertPointFromScreenToWall(self, point, screen):
        sx, sy = point
        ox, oy = self.calculateScreenOriginFromDescriptor(screen)
        return Point(ox + sx, oy + sy)

    def calculateScreenOriginFromDescriptor(self, descriptor):
        assert len(descriptor) == 3, "Invalid screen descriptor"
        descriptor = descriptor.upper()
        col, row, screen = descriptor
        col = ord(col) - ord('A') # Convert from A to 0, B to 1, etc.
        row = 3 - (int(row) - 1) # Start at 0 and flip
        screen = 0 if screen == 'L' else 1 #
        
        return SCREEN_WIDTH*(2*col+screen), SCREEN_HEIGHT*row
    
    def isPointingOnObject(self, event):
        return self.getObjectAtPoint((event.value.x, event.value.y)) is not None
        
    def getObjectAtPoint(self, point):
        x, y = point
        for node in self._sg:
            #if ShapeProtocol.objectConforms(node):
            if hasattr(node, 'x') and hasattr(node, 'y') and hasattr(node, 'width') and hasattr(node, 'height'):
                nx = node.x
                ny = node.y
                nw = node.width
                nh = node.height
                
                if hasattr(node, 'rotation'):
                    rotation = node.rotation
                else:
                    rotation = 0
                
                nodeRect = MakeRect(nx, ny, nw, nh)
                cx, cy = self.cursor.x, self.cursor.y
                cr = self.cursor.radius
                cursorRect = MakeRect(cx - cr, cy - cr, 2*cr, 2*cr)
                if geom.rectIntersectsRectWithRotation(cursorRect, nodeRect, rotation):
                    return node
        
        return None
    
    def getScottyWindow(self):
        result = None
        for node in self._sg:
            if hasattr(node, 'type'):
                if node.type == 'Scotty':
                    result = node
            else:
                print "node:", node, 'has no .type'
        
        return result
    
class ShapeProtocol(iStar.Protocol):
    signature = [ ['x y width height'.split() ],
                ]
