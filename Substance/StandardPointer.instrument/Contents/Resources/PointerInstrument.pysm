# -*- coding: utf-8 -*-
#
# Substance Instruments
#
# Copyright 2009-2011, Universit√© Paris-Sud
# by James R. Eagan (code at my last name dot me)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# and GNU Lesser General Public License along with this program.  
# If not, see <http://www.gnu.org/licenses/>.

from IIKit import *

import jre.debug

POINTER1=("pointing1", True)

class PointerInstrument(SubstanceSMInstrument):
    '''
    A very simple instrument that responds to pointing events by updating the position of the cursor.
    '''
    
    name = u"Standard Pointer" # FIXME refactor
    verb = u"Standard Pointing"
    consumesEvents = False
    priority = 1
    
    deviceID = None
    
    def __init__(self):
        super(PointerInstrument, self).__init__()
        self.deviceID = None
    
    def instantiate(self, with_state):
        super(PointerInstrument, self).instantiate(with_state)
        
        self._cursor = None
        self.deviceID = None
        self._neverMoved = True
        self._sgw, self._sgh = self.sg.get_value(self, "width"), self.sg.get_value(self, "height")
        # print "Pointer bound to cursor:", self._cursor
    
    def setContext(self, context):
        super(PointerInstrument, self).setContext(context)
        assert context.cursor is not None, "Context must have a cursor"
        self._cursor = self.sg/"cursors"/context.cursor
        self.deviceID = context.cursor
        self._cursor.new_value(self, "deviceID", "The associated device, if any", self.deviceID)
        # print "Pointer bound to cursor:", self._cursor, "for", self.deviceID
    context = property(SubstanceSMInstrument.getContext, setContext)
    
    # def setCursor(self, cursor):
    #     self._cursor = self.sg/"cursors"/cursor
    #     self.deviceID = cursor
    #     self._cursor.new_value(self, "deviceID", "The associated device, if any", self.deviceID)
    #     print "Pointer bound to cursor:", self._cursor, "for", self.deviceID
        
    State start:
        Transition point(self, Pointing, device=POINTER1, guard=lambda event: self._cursor is not None):
        # Transition point(self, Pointing, device='<bound>', guard=lambda event: self._cursor is not None):
            # self._cursor.position = self, self.relativePoint2canvas(event.point)
            self._cursor.position = self, event.point
            if self._neverMoved:
                self._neverMoved = False
                self._cursor.hidden = self, False
            # print "updated cursor position to", self._cursor.get_value(self, "position"), self.__class__
    
    def relativePoint2canvas(self, point):
        x, y = point
        return x * self._sgw, (1.0 - y) * self._sgh
            